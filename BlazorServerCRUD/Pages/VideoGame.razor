@page "/video-game"
@page "/video-game/{id:int}"
@inject IGameService GameService

@if(Id is null)
{
    <h3>Create a new video game</h3>
}
else
{
    <h3>Edit "@game.Name"</h3>
}

<EditForm Model="game" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="game.Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="publisher">Publisher</label>
        <InputText id="publisher" @bind-Value="game.Publisher" class="form-control"></InputText>
    </div>
    <div>
        <label for="release">Release Date</label>
        <InputDate id="release" @bind-Value="game.ReleaseDate" class="form-control"></InputDate>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    @if (Id is not null)
    {
        <button type="button" class="btn btn-danger" @onclick="@(() => GameService.DeleteGame(game.Id))">Delete Game</button>
    }
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;
    Game game = new();
    protected override async Task OnInitializedAsync()
    {
        btnText = Id is null ? "Create Game" : "Update Game";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            game = await GameService.GetGame((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if(Id is null)
        {
            await GameService.CreateGame(game);
        }
        else
        {
            await GameService.UpdateGame(game, (int)Id);
        }
    }
}